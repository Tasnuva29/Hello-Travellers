@{
    var renderEditBox = false;
}
<style>
    .post-img {
        width: 100%;
        height: auto;
    }

    .post-pos-fixed {
        position: fixed;
    }

    .post-text-justify {
        text-align: justify;
        text-justify: inter-word;
    }

    .post-img-profile {
        aspect-ratio: 1/1;
        width: 100%;
    }

    .post-view-height {
        height: 94vh;
    }

    .pt-2 {
        padding-top: 2rem;
    }

    .bg-grey {
        background-color: whitesmoke;
    }
</style>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-9 col-sm-12 post-view-height overflow-auto p-3">
            <p class="text-center fs-1 fw-bold">@ViewBag.Post.Title</p>
            @{
                var profUrl = Url.Content("~/UserProfile/Index?Username=" + ViewBag.Writer.Username);
                Hello_Travellers.Models.Post post = ViewBag.Post;
                var count = post.Reacts.Sum(t => t.ReactStatus);
            }
        <p class="text-center fw-light">Written By <span onclick="location.href = '@profUrl'">@ViewBag.Writer.Name</span>, @count Votes, Posted on @ViewBag.Post.CreationTime</p>
            @if (Session["Username"] != null)
            {
                <p class="text-center fw-bold font-monospace">  
                    @if (ViewBag.currentReact.ReactStatus == 1)
                    {
                        <i class="bi bi-hand-thumbs-up-fill mx-2" onclick="btnVoteClicked(0)">Upvote</i>
                    }
                    else
                    {
                        <i class="bi bi-hand-thumbs-up mx-2" onclick="btnVoteClicked(1)">Upvote</i>
                    }
                    @if (ViewBag.currentReact.ReactStatus == -1)
                    {
                        <i class="bi bi-hand-thumbs-down-fill mx-2" onclick="btnVoteClicked(-1)">Downvote</i>
                    }
                    else
                    {
                        <i class="bi bi-hand-thumbs-down mx-2" onclick="btnVoteClicked(-1)">Downvote</i>
                    }
                    <!--Report Button to trigger modal starts here-->
                    @if (Session["Username"].ToString().CompareTo(ViewBag.Writer.Username) != 0 && !ViewBag.Writer.Rank.Contains("ADMIN"))
                    {
                        <i class="bi bi-flag mx-2" data-bs-toggle="modal" data-bs-target="#reportModal">Report</i>
                    }
                    else
                    {
                        <i class="bi bi-pencil-square mx-2" data-bs-toggle="modal" onclick="btnEditClicked()">Edit</i>
                        <i class="bi bi-trash3 mx-2" data-bs-toggle="modal" onclick="btnDeleteClicked()">Delete</i>
                        renderEditBox = true;
                    }

                </p>
            }
            @if (ViewBag.Media.Length > 0)
            {
                <div id="indexCarousel" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < ViewBag.Media.Length; ++i)
                        {
                            <button type="button" id=@String.Format("slideBtn{0}", i) data-bs-target="#indexCarousel" data-bs-slide-to=@String.Format("{0}", i) aria-label=@String.Format("Slide {0}", i + 1)></button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @for (int i = 0; i < ViewBag.Media.Length; ++i)
                        {
                            <div id=@String.Format("slideInner{0}", i) class="carousel-item index-carousal-fitter">
                                <img src=@Url.Content("~/Images/MediaContent/" + ViewBag.Media[i].MediaID + ViewBag.Media[i].Type) class="post-img rounded index-carousal-img" alt="...">
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#indexCarousel" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#indexCarousel" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            }
            <p id="content" class="text-start my-3" style="text-align: justify">
                @ViewBag.Post.Content
            </p>
            @if (renderEditBox == true)
            {
                <div id="editBox" style="display: none">
                    <div class="form-group my-2">
                        <textarea class="form-control" id="editedTexts" rows="6">@ViewBag.Post.Content</textarea>
                    </div>
                    <button class="btn btn-primary" onclick="btnSaveClicked()">Save</button>
                    <button class="btn btn-secondary" onclick="btnCancelClicked()">Cancel</button>

                </div>
            }
            <!--Report Modal Begins here-->
            <div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalArea" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="reportModal">Modal title</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="reportDescription">Why are you reporting this post?</label>
                                <textarea class="form-control" id="reportDescription" rows="4"></textarea>
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="btnReportClicked()">Report</button>
                        </div>
                    </div>
                </div>
            </div>
            <!--Report Modal Ends here here-->
        </div>
        <div class="col-md-3 col-sm-12 overflow-auto position-sticky">
            <div class="container-fluid">
                <div class="row my-3">
                    <div class="col-11 p-0">
                        @if (Session["Username"] != null)
                        {
                            <form action="~/Post/ViewPost" method="post" class="p-0" id="cmntForm">
                                <textarea id="comment" class="form-control my-1" rows="3" placeholder="Comment something..." name="Content"></textarea>
                                <input type="button" class="btn-primary form-control" value="Comment" onclick="btnSubmitComment()" />
                            </form>
                        }
                        else
                        {
                            <div class="p-0 container-fluid">
                                <p class="text-center">Login to comment!</p>
                            </div>
                        }
                    </div>
                </div>
                @foreach (var item in ViewBag.Post.Replies)
                {
                    <div class="row my-3">
                        <div class="col-2 p-0 m-0">
                            <img class="rounded-circle post-img-profile" src=@Url.Content("~/Images/ProfilePicture/" + item.User.DisplayPictureName) />
                        </div>
                        <div class="col-9 mx-1 rounded bg-grey">
                            <div class="d-flex flex-row justify-content-between py-1">
                                <div class="d-flex flex-row">
                                    <span class="fw-bold">@item.User.Name</span>
                                    <time class="loaded timeago border align-self-center mx-2" datetime="@item.CreationTime" style="font-size: 0.8rem;"></time>
                                </div>
                                @if (Session["Username"] != null && !Session["Username"].ToString().Equals(item.User.Username) && !item.User.Rank.Contains("ADMIN"))
                                {
                                    <i class="bi bi-flag" onclick="btnReportReply(@item.ReplyID)"></i>
                                }
                            </div>
                            <div class="fw-lighter">@item.Content</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var slideButton0 = document.getElementById("slideBtn0");
    if (slideButton0 != null) {
        slideButton0.setAttribute("class", "active");
        slideButton0.setAttribute("aria-current", "true");
    }

    var slideInner0 = document.getElementById("slideInner0");
    if (slideInner0 != null) {
        slideInner0.setAttribute("class", "carousel-item index-carousal-fitter active post-img rounded");
    }

    function btnSubmitComment() {
        var cmnt = document.getElementById('comment');
        if (cmnt.value.trim().length <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Write Something!'
            });
            return;
        }
        $('#cmntForm').submit();
    }

    function btnVoteClicked(reactStatus) {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateReact", "Post")',
            data: {
                PostID: postID,
                ReactStatus: reactStatus
            },
            success: function (response) {
                location.reload();
            },
            error: function (response) {
                console.log(response);
            }
        })
    }

    function btnReportClicked() {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        var reportReason = $('#reportDescription').val();
        if (reportReason.trim().length <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Write Something!'
            });
            return;
        }
        console.log(reportReason);
        $.ajax({
            type: 'POST',
            url: '@Url.Action("Report", "Post")',
            data: {
                Reason: reportReason,
                Context: 'POST',
                ContextID: postID
            },
            success: function (response) {
                console.log(response);
                let jsonData = JSON.parse(response);
                console.log(jsonData);
                if (jsonData.Status == "Exists") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Report Pending',
                        text: 'Seems like you have a pending report on this post!'
                    });

                }
                if (jsonData.Status == "Reported") {
                    Swal.fire({
                        icon: 'success',
                        title: 'Reported',
                        text: 'Your report was succesfully submitted!'
                    });
                }
            }
        })
    }

    async function btnReportReply(replyID) {
        const { value: text } = await Swal.fire({
            input: 'textarea',
            inputLabel: 'Reason for report',
            inputPlaceholder: 'Type your reason here...',
            inputAttributes: {
                'aria-label': 'Type your reason here'
            },
            showCancelButton: true
        })

        if (text) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateReplyReport", "Post")',
                data: {
                    Reason: text,
                    ReplyID: replyID
                },
                success: (response) => {
                    if (response == "Error") {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed!',
                            text: 'Something went wrong!'
                        });
                    }
                    if (response == "Exists") {
                        Swal.fire({
                            icon: 'error',
                            title: 'Already Reported!',
                            text: 'You have already reported this comment!'
                        });
                    }
                }
            })
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Invalid',
                text: 'Give us a reason!'
            });
        }
    }
    function btnEditClicked() {
        $('#content').css('display', 'none');
        $('#editBox').css('display', 'block');
    }
    function btnCancelClicked() {
        $('#content').css('display', 'block');
        $('#editBox').css('display', 'none');
    }
    function btnSaveClicked() {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        var newContent = $('#editedTexts').val();
        if (newContent.trim().length <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Your post cannot be empty!'
            });
            return;
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdatePost", "Post")',
            data: {
                PostID: postID,
                Content: newContent
            },
            success: () => {
                location.reload();
            },
            error: (response) => {
                console.log(response);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong!'
                });
                btnCancelClicked();
            }
        })
    }
    function btnDeleteClicked() {
        const params = new URLSearchParams(window.location.search);
        var postID = params.get('PostID');
        $.ajax({
            type: 'POST',
            url: '@Url.Action("DeletePost", "Post")',
            data: {
                PostID: postID
            },
            success: () => {
                location.replace('@Url.Content("~/Home/Index")');
            },
            error: (response) => {
                console.log(response);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong!'
                });
                btnCancelClicked();
            }
        })
    }
</script>