@model Hello_Travellers.Models.User

<style>
    .hq-input {
        outline: none;
        border-radius: 10px;
        border: 2px solid #e7e7e7;
    }

        .hq-input:focus {
            outline: none;
            border-color: #3498db;
        }

    .input-group-text {
        border-radius: 10px;
    }
   
</style>
@using (Html.BeginForm("EditProfile", "UserProfile", FormMethod.Post, new { id = "editProfileForm", enctype = "multipart/form-data" }))
{
    var url = Url.Content("~/Images/ProfilePicture/" + ViewBag.user.DisplayPictureName);
    <div class="container-xl px-4 mt-4">
        <div class="row">
            <div class="col-xl-4">
                <!-- Profile picture card-->
                <div class="card mb-4 mb-xl-0">
                    <div class="card-header">Profile Picture</div>
                    <div class="card-body text-center">
                        <!-- Profile picture image-->
                        <img class="img-fluid shadow" src="@url" id="DisplayPicture">
                        <!-- Profile picture upload button-->
                        <div class="mt-2">
                            <input type="file" accept="image/png,image/jpeg,image/jpg" name="postedImages" id="postedImages">
                        </div>

                    </div>
                </div>
            </div>


            <div class="col-xl-8">
                <!-- Account details card-->
                <div class="card mb-4">
                    <div class="card-header">Account Details</div>
                    <div class="card-body">


                        <!--info change-->
                        <div class="mb-2">
                            <label for="inputName" class="small mb-1 ms-2">Name</label>
                            <input type="text" class="form-control hq-input" id="inputName" placeholder="your name" name="Name" value="@ViewBag.user.Name" pattern="[A-Za-z ]*" title="only A-z,a-z,Space is allowed" minLength="3">
                        </div>
                        <div class="mb-2">
                            <label for="inputPhoneNum" class="small mb-1 ms-2">Phone Number</label>
                            <input type="text" class="form-control hq-input" id="inputPhoneNum" placeholder="your phone number" name="PhoneNumber" value="@ViewBag.user.PhoneNumber" pattern="^\+?\d+$" maxlength="14" minlength="11" title="only letters and plus sign is allowed with proper length">
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-2">
                            <label for="inputUserEmail" class="small mb-1 ms-2">Email address</label>
                            <input type="email" class="form-control hq-input" id="inputUserEmail" placeholder="name@example.com" name="Email" value="@ViewBag.user.Email">
                        </div>
                        <div class="mb-2">
                            <label for="inputUserAbout" class="small mb-1 ms-2">About</label>
                            <textarea class="form-control hq-input" id="inputUserAbout" maxlength="250" name="About">@ViewBag.user.About</textarea>
                            <span id="char_count"></span>
                        </div>

                        <hr class="mt-4 mb-4">
                        <!--Password-->
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="changePassCheck">
                            <label class="form-check-label" for="changePassCheck">Change Password</label>
                        </div>

                        <label for="inputOldPassword" class="small mb-1 ms-2">Old Password</label>
                        <div class="input-group mb-2">
                            <input type="password" class="form-control hq-input" id="inputOldPassword" disabled>
                            <i class="input-group-text bi bi-eye-slash" id="togglePassword1" pattern="(?=.\d)(?=.[a-z])(?=.*[A-Z]).{6,}" title="Must be 6 digit with A-Z,a-z,digit" onclick="showPassword(this.id, 'inputOldPassword')"></i>
                        </div>
                        <label for="inputNewPassword" class="small mb-1 ms-2">New Password</label>
                        <div class="input-group mb-2">
                            <input name="Password" type="password" class="form-control hq-input" id="inputNewPassword" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}" title="Must be 6 digit with A-Z,a-z,digit" disabled>
                        </div>
                        <label for="inputConfirmPassword" class="small mb-1 ms-2">Confirm Password</label>
                        <div class="input-group mb-2 border-0 shadow-sm">
                            <input name="ConfirmPassword" type="password" class="form-control hq-input" id="inputConfirmPassword" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}" title="Must be 6 digit with A-Z,a-z,digit" disabled>
                            <i class="input-group-text bi bi-eye-slash" id="togglePassword3" onclick="showPassword(this.id, 'inputConfirmPassword')"></i>
                        </div>
                        <!-- Save changes button-->
                        <button class="btn" type="button" onclick="editProfileSubmit()" style="background-color: #4abdac; color:white;">Save changes</button>
                        <button class="btn" type="button" id="btnCancel" style="background-color: #4abdac; color:white;">Cancel</button>
                        <button type="submit" style="display: none" id="btnSubmit"></button>

                    </div>

                </div>
            </div>
        </div>
    </div>
}

<script>


    document.addEventListener("DOMContentLoaded", redirectIfNotLoggedIn('@Session["Username"]'));


    $('#inputConfirmPassword').on('keyup', () => {
        if ($('#inputNewPassword').val() == $('#inputConfirmPassword').val()) {
            $("#alertPasswordMatch").css("display", "none");
        } else {
            $("#alertPasswordMatch").css("display", "inline");
        }
    });


    $('#changePassCheck').on('change', () => {
        if ($('#changePassCheck').is(":checked")) {
            $('#inputOldPassword').attr("disabled", false);
            $('#inputNewPassword').attr("disabled", false);
            $('#inputConfirmPassword').attr("disabled", false);
        }
        else {
            $('#inputOldPassword').attr("disabled", true);
            $('#inputNewPassword').attr("disabled", true);
            $('#inputConfirmPassword').attr("disabled", true);
        }
    })

    async function editProfileSubmit() {
        if ($('#changePassCheck').is(":checked")) {
            if ($('#inputNewPassword').val() != $('#inputConfirmPassword').val()) {
                Swal.fire({
                    icon: 'error',
                    title: 'Password Mismatch!',
                    text: 'Please make sure both password field matches!'
                });
                return;
            }
        }

        $.ajax({
            type: 'GET',
            url: '@Url.Action("MatchPassword", "UserProfile")',
            data: {
                Password: $('#inputOldPassword').val()
            },
            success: (data) => {
                if (data == "Mismatch") {
                    Swal.fire({
                        icon: 'error',
                        title: 'Password Mismatch!',
                        text: 'Make sure you have entered the old password correctly!'
                    });
                    return;
                }
                $('#btnSubmit').click();
            }
        })
    }

    //Image Upload
    var imageInput = document.getElementById("postedImages");
    imageInput.onchange = event => {
        $('#DisplayPicture').attr("src", URL.createObjectURL(imageInput.files[0]));
    }



    //---textArea character count---//

    let textArea = document.getElementById("inputUserAbout");
    let showChar = document.getElementById("char_count");
    let cnt = textArea.value.length;
    //alert(cnt);
    //keydown for key press
    textArea.addEventListener("keydown", countChar);
    function countChar(e) {
        var key = e.keyCode || e.charCode;
        if (key == 8) {
            if (cnt != 0) {
                cnt--;
            }
        }
        else {
            cnt++;
        }
        //let numOfEnteredChar = textArea.value.length;
        console.log(textArea.value + " " + cnt);
        showChar.innerHTML = cnt + "/250";
    }

    //--password toggle--//
    function showPassword(iconID, inputFieldID) {
        if (document.getElementById(iconID).className === "input-group-text bi bi-eye-slash") {
            document.getElementById(iconID).className = "input-group-text bi bi-eye";
            document.getElementById(inputFieldID).type = "text";
        }
        else {
            document.getElementById(iconID).className = "input-group-text bi bi-eye-slash";
            document.getElementById(inputFieldID).type = "password";
        }
    }
    //redirect to previous page
    document.getElementById("btnCancel").onclick = function () {
        location.href = "Index";
    };
    //--crop image--//


    @*function btnSubmitClicked() {
        var formData = new FormData();
        formData.append("Name", $('#inputName').val());
        formData.append("Name", $('#inputName').val());
        formData.append("Name", $('#inputName').val());
        formData.append("Name", $('#inputName').val());
        formData.append("Name", $('#inputName').val());
    }*@
</script>
